using System;
using System.ComponentModel;
using Basic.Configuration;
using Basic.Enums;

namespace Basic.Designer
{
	/// <summary>
	/// 属性包装器
	/// </summary>
	/// <typeparam name="TDD">需要包装属性的信息</typeparam>
	internal sealed class DynamicCommandDescriptor : ObjectDescriptor<DynamicCommandElement>
	{
		private PropertyDescriptorCollection propertyDescriptors = null;
		private readonly string[] _Sorted = new string[] { 
		"AutoGenerated", "AsyncGenerated","Name","Comment","命令类型","Modifier","ExecutableMethod",
		"Condition", "WithClauses","WithClause", "SelectText", "FromText", "WhereText", "GroupText", "HavingText", "OrderText",
		"CommandType","CommandTimeout","Parameters"};
		/// <summary>
		/// 初始化 StaticCommandDescriptor 实例
		/// </summary>
		/// <param name="dInfo"></param>
		public DynamicCommandDescriptor(DynamicCommandElement dInfo) : base(dInfo) { }

		/// <summary>
		/// 返回将特性数组用作筛选器的此组件实例的属性。
		/// </summary>
		/// <param name="attributes">用作筛选器的 System.Attribute 类型数组。</param>
		/// <returns>表示此组件实例的已筛选属性的 System.ComponentModel.PropertyDescriptorCollection。</returns>
		public override PropertyDescriptorCollection GetProperties(Attribute[] attributes)
		{
			ConfigurationTypeEnum kind = base.DefinitionInfo.Kind;
			PropertyDescriptorCollection properties = new PropertyDescriptorCollection(null);
			if (propertyDescriptors == null)
				propertyDescriptors = base.GetProperties(attributes);
			foreach (PropertyDescriptor property in propertyDescriptors)
			{
				if ((kind == ConfigurationTypeEnum.AddNew || kind == ConfigurationTypeEnum.Modify ||
					kind == ConfigurationTypeEnum.Remove || kind == ConfigurationTypeEnum.SearchTable ||
					kind == ConfigurationTypeEnum.SelectByKey) && property.Name == "Name") { continue; }
				else if (property.IsBrowsable)
					properties.Add(property);
			}

			if (base.DefinitionInfo.WithClauses.Count > 0)
			{
				foreach (WithClause clause in base.DefinitionInfo.WithClauses)
				{
					properties.Add(new WithClauseDescriptor(clause));
				}
			}
			return properties.Sort(_Sorted); 
		}
	}
}
